---
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import type { CollectionEntry } from 'astro:content';

import Icon from './icon/Icon.astro';
import ProjectCard from './ProjectCard.astro';
import ProjectContext from './ProjectContext.astro';
import ProjectThumbnail from './ProjectThumbnail.astro';

interface Props {
  projects: CollectionEntry<'projects'>[]
}

const pageLang = getLangFromUrl(Astro.url);
const t = useTranslations(pageLang);

const {
  projects,
} = Astro.props;

const clearLogosMap: { [key: string]: boolean } = {
  budmin: true,
};

const projectsWithRef = projects.map((project) => {
  const { id } = project;
  const projectHref = `/${pageLang}/project/${id.split('/').slice(1)}`;
  const normalizedProjectName = project.data.projectName.toLowerCase();

  return {
    ...project,
    projectHref,
    darkLogo: normalizedProjectName in clearLogosMap,
  };
});
---
<section class="projectsShowcase relative">
  <div id="project-selector-carousel" class="splide projectsShowcase__galleries" aria-label={t('projects.mainCarousel.aria')}>
    <div class="splide__track">
      <ul class="splide__list restarted-list">
        {
          projectsWithRef.map((project) => (
            <li class="splide__slide">
              <ProjectCard project={project}/>
            </li>
          ))
        }
      </ul>
    </div>
  </div><!-- Galleries splide -->
  <div class="projectsShowcase__data-container">
    <section class="splide projectsShowcase__thumbnails restarted-list" id="thumbnail-carousel" aria-label="TODO">
      <div class="splide__arrows projectsShowcase__thumbnails__arrows">
        <button class="splide__arrow splide__arrow--prev projectsShowcase__thumbnails__arrow projectsShowcase__thumbnails__arrow--prev">
          <Icon variant='ChevronRight' />
        </button>
        <button class="splide__arrow splide__arrow--next projectsShowcase__thumbnails__arrow projectsShowcase__thumbnails__arrow--next">
          <Icon variant='ChevronRight' />
        </button>
      </div>
      <div class="splide__track">
        <ul class="splide__list">
          {
            projectsWithRef.map((project) => (
              <li
                class="splide__slide projectsShowcase__thumbnail"
                aria-label={t('projects.mainCarousel.thumbnail.construelectricjv')}
              >
                <ProjectThumbnail project={project} darkLogo={project.darkLogo} />
              </li>
            ))
          }
        </ul><!-- Thumbnails Splide -->
      </div>
    </section>
    <section
      id={'context-carousel'}
      class="splide projectsShowcase__context"
      aria-label={t('project.context.aria')}
    >
      <div class="splide__track">
        <ul class="splide__list restarted-list">
          {projectsWithRef.map((project) => (
            <li class="splide__slide">
              <ProjectContext
                projectName={project.data.projectName}
                projectHref={project.projectHref}
                excerpt={project.data.excerpt}
                classes='projectsShowcase__context'
              />
            </li>
          ))}
        </ul>
      </div>
    </section><!-- Context Splide -->
  </div>
</section>

<script>
  import Splide from '@splidejs/splide'

  const galleriesSlider = new Splide("#project-selector-carousel", {
    pagination: false,
    arrows: false,
    drag: false,
    type: 'fade'
  })

  const thumbnailSlider = new Splide("#thumbnail-carousel", {
    perPage: 2,
    rewind: true,
    focus: 0,
    isNavigation: true,
    breakpoints: {
      1023: {
        perPage: 3,
      },
      375: {
        perPage: 2,
      }
    }
  })

  const contextSlider = new Splide(`#context-carousel`, {
    pagination: false,
    arrows: false,
    type: 'fade',
  })

  thumbnailSlider.on('pagination:mounted', (data) => {
    data.list.classList.add('projectsShowcase__thumbnails__pagination')

    data.items.forEach((item) => {
      item.button.classList.add('projectsShowcase__thumbnails__pagination__page')

      item.li.classList.add('projectsShowcase__thumbnails__pagination__li')
    })
  })

  galleriesSlider.sync(contextSlider)
  galleriesSlider.sync(thumbnailSlider)

  galleriesSlider.mount()
  thumbnailSlider.mount()
  contextSlider.mount()
</script>

<style lang="scss">
  .projectsShowcase {
    @include mediaq($bp-small-pc) {
      display: grid;
      grid-template-columns: 2fr minmax(370px, 1fr);
      gap: rem(24);
    }

    &__galleries {
      margin-bottom: rem(16);
      outline: 2px solid $primary-light-beige;
      background-color: $primary-light-beige;
      border-radius: 8px;
      overflow: hidden;

      @include mediaq($bp-small-pc) {
        margin-bottom: 0;
      }

      .splide {
        &__list {
          align-items: center;
        }
      }
    }

    &__thumbnail {
      opacity: 0.3;
      transition: opacity 100ms;

      &.is-active {
        opacity: 1;
      }
    }

    &__data-container {
      @include mediaq($bp-small-pc) {
        display: flex;
        flex-direction: column;
      }
    }

    &__thumbnails {
      position: relative;
      border-radius: 8px;
      margin-bottom: rem(24);

      .splide {
        &__track {
          background-color: hsl(60, 56%, 91%, 0.2);
          border-radius: 8px;
        }
      }

      &__arrows {
        @include mediaq($bp-small-pc) {
          width: min-content;
          position: absolute;
          right: 0;
          display: flex;
          gap: rem(8);
          transform: translateY(-120%);
        }
      }

      &__arrow {
        $translationX: 120%;
        $translationY: -50%;
        $arrowContainerSize: 25px;
        $arrowIconSize: 15px;

        @include size($arrowContainerSize);
        padding: 8px;
        background-color: $primary-light-beige;
        transition: all ease-in 100ms;

        @include mediaq($bp-small-pc) {
          top: 0;
          position: unset;
        }

        &--prev {
          left: 0;
          transform: translate(-$translationX, $translationY);

          @include mediaq($bp-small-pc) {
            transform: unset;
          }
        }

        &--next {
          right: 0;
          transform: translate($translationX, $translationY);

          @include mediaq($bp-small-pc) {
            transform: unset;
          }
        }
      }

    }
    &__context {
      height: 100%;
      & * {
        height: 100%;
      }
    }
  }

  #thumbnail-carousel {
    .projectsShowcase {
      &__thumbnail {
        border: none;
      }
    }
  }

  :global(.projectsShowcase__thumbnails__pagination) {
    height: 16px;
    bottom: 0;
    transform: translateY(125%);
    align-items: center;
  }

  :global(.projectsShowcase__thumbnails__pagination__page) {
    margin: 0 3px;
  }

  :global(li.projectsShowcase__thumbnails__pagination__li) {
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>
