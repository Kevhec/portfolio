---
import type { CollectionEntry } from 'astro:content'
import ProjectCard from './ProjectCard.astro';
import ProjectThumbnail from './ProjectThumbnail.astro';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import Icon from './icon/Icon.astro';
import ProjectContext from './ProjectContext.astro';

interface Props {
  projects: CollectionEntry<'projects'>[]
}

const pageLang = getLangFromUrl(Astro.url);
const t = useTranslations(pageLang);

const {
  projects
} = Astro.props;

const projectsWithRef = projects.map((project) => {
  const { id } = project;
  const projectHref = `/${pageLang}/project/${id.split('/').slice(1)}`
  return {
    ...project,
    projectHref
  }
})
---
<section id="project-selector-carousel" class="splide projectsShowcase relative" aria-label={t('projects.mainCarousel.aria')}>
  <div class="splide__arrows projectsShowcase__arrows">
    <button class="splide__arrow splide__arrow--prev projectsShowcase__arrow projectsShowcase__arrow--prev">
      <Icon variant='ChevronRight' />
    </button>
    <button class="splide__arrow splide__arrow--next projectsShowcase__arrow projectsShowcase__arrow--next">
      <Icon variant='ChevronRight' />
    </button>
  </div>
  <div class="splide__track projectsShowcase__gallery">
    <ul class="splide__list restarted-list">
      {
        projectsWithRef.map((project) => (
          <li class="splide__slide projectsShowcase__listItem">
            <ProjectCard project={project}/>
          </li>
        ))
      }
    </ul>
  </div>
  <div class="projectsShowcase__data-container relative">
    <ul class="thumbnails projectsShowcase__thumbnails restarted-list" id="thumbnails">
      {
        projectsWithRef.map((project, i) => (
          <li
            class="thumbnail projectsShowcase__thumbnail"
            tabindex="0"
            aria-controls={`project-selector-carousel-slide0${i + 1}`}
            aria-label={t('projects.mainCarousel.thumbnail.construelectricjv')}
          >
            <ProjectThumbnail project={project} />
          </li>
        ))
      }
    </ul>
    <section
      id={`context-carousel`}
      class="splide projectsShowcase__contextSplide"
      aria-label={t('project.context.aria')}
    >
      <div class="splide__track">
        <ul class="splide__list restarted-list">
          {projectsWithRef.map((project) => (
            <li class="splide__slide">
              <ProjectContext
                projectName={project.data.projectName}
                projectHref={project.projectHref}
                excerpt={project.data.excerpt}
                classes='projectsShowcase__context'
              />
            </li>
          ))}
        </ul>
      </div>
    </section>
  </div>
</section>

<script>
  import Splide from '@splidejs/splide'

  const thumbnails = document.querySelectorAll<HTMLLIElement>('.thumbnail.projectsShowcase__thumbnail')

  let currentThumbnail: HTMLLIElement | undefined

  const showcaseSlider = new Splide("#project-selector-carousel", {
    pagination: false,
    drag: false,
    type: 'fade'
  })

  const contextSlider = new Splide(`#context-carousel`, {
    pagination: false,
    arrows: false,
    type: 'fade'
  })

  contextSlider.on('mounted move', handleSlidesChange)

  function initThumbnail(thumbnail: HTMLLIElement, index: number) {
    thumbnail.addEventListener('click', () => {
      showcaseSlider.go(index)
      contextSlider.go(index)
    })
  }

  for (let i = 0; i < thumbnails.length; i++) {
    initThumbnail(thumbnails[i], i)
  }

  function handleSlidesChange() {
    if (currentThumbnail) {
      currentThumbnail.classList.remove('projectsShowcase__thumbnail--is-active')
      currentThumbnail.removeAttribute('aria-current')
    }

    const newCurrentThumbnail = thumbnails[showcaseSlider.index]

    if (newCurrentThumbnail) {
      newCurrentThumbnail.classList.add('projectsShowcase__thumbnail--is-active')
      newCurrentThumbnail.setAttribute('aria-current', 'true')
      currentThumbnail = newCurrentThumbnail
    }
  }

  showcaseSlider.on('mounted move', handleSlidesChange)
  contextSlider.on('mounted move', handleSlidesChange)

  showcaseSlider.sync(contextSlider)

  showcaseSlider.mount()
  contextSlider.mount()
</script>

<style lang="scss">
  .projectsShowcase {
    display: flex;
    flex-direction: column;

    @include mediaq($bp-tablet) {
      gap: rem(8);
      display: grid;
      grid-template-columns: 2fr 1fr;
    }

    &__gallery {
      border-radius: 8px 8px 0px 0px;
      overflow: hidden;
      border: 4px solid $primary-light-beige;

      @include mediaq($bp-tablet) {
        border-radius: 8px;
        grid-column: 1 / 2;
      }
    }

    &__contextSplide {
      & * {
        height: 100%;
      }

      @include mediaq($bp-tablet) {
        display: block;
        flex: 1;
      }
    }

    &__data-container {
      display: flex;
      gap: rem(8);
      flex-direction: column-reverse;

      @include mediaq($bp-tablet) {
        display: grid;
        grid-template-rows: min-content 1fr;
        gap: rem(8);
      }
    }

    &__thumbnails {
      display: flex;
      justify-content: space-evenly;
      border-radius: 8px;
      overflow: hidden;
      position: relative;

      @include mediaq($bp-tablet) {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
      }
    }

    &__arrows {
      position: absolute;
      top: unset;
      width: 100%;
      bottom: 0;
      transform: unset;

      @include mediaq($bp-tablet) {
        top: 0;
        bottom: unset;
        right: 0;
      }
    }

    &__arrow {
      $translationX: 115%;
      $translationY: -85%;
      $arrow-size: rem(24);
      $icon-size: rem(12);

      @include flexCenter();
      top: -$arrow-size;
      width: $arrow-size;
      height: $arrow-size;
      padding: rem(4);
      aspect-ratio: 1 / 1;
      background-color: $primary-light-beige;
      transition: all ease-in-out 100ms;
      color: white;

      & > :global(svg) {
        width: $icon-size;
        height: $icon-size;
      }

      &--prev {
        left: 0;
        transform: translateX(-$translationX) translateY($translationY);

        @include mediaq($bp-tablet) {
          left: unset;
          right: 0;
          transform: translateX(-$translationX) translateY(-20%);
        }
      }
      
      &--next {
        right: 0;
        transform: translateX($translationX) translateY($translationY);

        @include mediaq($bp-tablet) {
          right: 0;
          transform: translateY(-20%);
        }
      }
    }

    &__thumbnail {
      flex-grow: 1;
      cursor: pointer;
      position: relative;

      & > :global(.projectThumbnail) {
        transition: opacity ease-in 200ms;
        opacity: 0.3;
      }

      &:not(:last-of-type)::after {
        content: '';
        width: 2px;
        height: 100%;
        position: absolute;
        background-color: white;
        transform: translateX(-50%);
        right: 0;
        top: 0;

        @include mediaq($bp-tablet) {
          display: none;
        }
      }

      &:hover:not(&--is-active) {
        & > :global(.projectThumbnail) {
          opacity: .6;
        }
      }

      &--is-active {
        & > :global(.projectThumbnail) {
          opacity: 1;
        }
      }
    }
  }

  :global(.projectsShowcase__context) {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
</style>