---
import type { HTMLTag, Polymorphic } from 'astro/types';

type Variants =
  (
    | 'a'
    | 'button'
  ) &
  HTMLTag

type Props<Tag extends Variants> = Polymorphic<{
  as: Tag,
  href?: string
  iconOnly?: boolean,
  textOnly?: boolean,
  newTab?: boolean,
  positionAware?: boolean,
  noBorder?: boolean,
  inline?: boolean,
}>

const {
  as: Tag,
  href,
  iconOnly,
  newTab, 
  textOnly,
  positionAware,
  noBorder,
  inline,
  ...attrs
} = Astro.props;
---

<Tag
  href={href}
  {...attrs}
  class:list={[
    'button',
    {
      'button--iconOnly': iconOnly,
      'button--positionAware': positionAware,
      'button--textOnly': textOnly,
      'button--noBorder': noBorder,
      'button--inline': inline,
    },
  ]}
  target={newTab ? '_blank' : '_self'}
  rel={newTab ? 'noreferrer' : null}
>
  {positionAware && <span class="button__span" />}
  <slot />
</Tag>

<style lang="scss">
  .button {
    position: relative;
    overflow: hidden;
    font-family: $lora;
    font-size: 16px;
    font-weight: 600;
    text-decoration: none;
    color: $primary-light-beige;

    &:not(.button--iconOnly):not(.button--textOnly):not(.button--noBorder) {
      padding: rem(8) rem(16);
      border: 1px solid $primary-light-beige;
      border-radius: 9999px;
    }

    &:hover {
      span {
        @include size(225%, calc(var(--button-width)*2.25))
      }
    }

    &__span {
      border-radius: 50%;
      position: absolute;
      top: var(--top);
      left: var(--left);
      transform: translate(-50%, -50%);
      @include size(0);
      background-color: rgba(225, 230, 224, 0.2);
      transition-property: width, height;
      transition-duration: 0.4s, 0.4s;
      transition-timing-function: ease-in-out, ease-in-out;
      z-index: -1;
    }

    &--inline {
      display: flex;
      gap: rem(8);
      align-items: center;
    }
  }
</style>

<script>
  const getButtonProps = (button: HTMLButtonElement) => {
    const buttonRect = button.getBoundingClientRect();

    const scrollTop = window.scrollY || document.documentElement.scrollTop;

    const yPos = buttonRect.top + scrollTop;
    const xPos = buttonRect.left;
    const width = button.offsetWidth;

    return {
      yPos,
      xPos,
      width,
    };
  };

  const positionSpan = ({
    span, mouseEvent, xPos, yPos,
  }:{
    span: HTMLSpanElement,
    mouseEvent: MouseEvent,
    xPos: number,
    yPos: number,
  }) => {
    const { clientX, pageY } = mouseEvent;

    const relX = clientX - xPos;
    const relY = pageY - yPos;

    span.style.setProperty('--top', `${relY}px`);
    span.style.setProperty('--left', `${relX}px`);
  };

  const applyButtonsVariables = () => {
    const buttons:
      // eslint-disable-next-line no-undef
      NodeListOf<HTMLButtonElement> = document.querySelectorAll('.button--positionAware');

    buttons.forEach((button) => {
      const { xPos, yPos, width } = getButtonProps(button);

      button.style.setProperty('--button-width', `${width}px`);

      const handleButtonEvent = (evt: MouseEvent) => {
        const span = button.querySelector('span');
        if (!span) return;
        positionSpan({
          span, mouseEvent: evt, xPos, yPos,
        });
      };
      button.removeEventListener('mouseenter', handleButtonEvent);
      button.removeEventListener('mouseleave', handleButtonEvent);

      button.addEventListener('mouseenter', handleButtonEvent);
      button.addEventListener('mouseleave', handleButtonEvent);
    });
  };

  applyButtonsVariables();

  window.addEventListener('resize', () => {
    applyButtonsVariables();
  });
</script>
